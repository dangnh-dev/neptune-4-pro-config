#############################################################################
#   Print Start & End
#############################################################################
[gcode_macro PRINT_START_WITH_DOCKER]   
variable_small_print: False
gcode:
  {action_respond_info("Running PRINT START...")}

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set BED_HEAT_SOAK_MINUTES = params.BED_HEAT_SOAK_MINUTES|default(0)|float %}
  {% set BED_MESH = params.BED_MESH|default('adaptive')|string %} ; One of: adaptive (default), full, default (or any other value as the bed mesh profile name), none
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set PRINT_SIZE = params.PRINT_SIZE|default("0_0_0_0")|string %}

  SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=False
  HEATERBED_SELECT SIZE={PRINT_SIZE}                                                                                     # Determine which heater beds are needed
  BED_MESH_CLEAR

  SET_BED_TEMPERATURE TARGET={BED_TEMP}                           ; Heat Bed to target temp
  BED_TEMPERATURE_WAIT MINIMUM={BED_TEMP-2} MAXIMUM={BED_TEMP+4}  ; Waits until the bed reaches close to target
  RESPOND TYPE=command MSG='Bed Temp Reached, Beginning Scan'

  CG28
  ATTACH_PROBE                             
  {% if not printer.z_tilt.applied %}
    Z_TILT_ADJUST_ORIGINAL                  # Z Tilt if not already done
  {% endif %}
  
  {% if BED_MESH == 'full' %}
    BED_MESH_CALIBRATE
  {% elif BED_MESH == 'adaptive' %}
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% elif BED_MESH != 'none' %}
    BED_MESH_PROFILE LOAD={BED_MESH}
  {% endif %}
  SKEW_PROFILE LOAD=CaliFlower
  G92 E0                                                          ; Reset Extruder
  DETACH_PROBE
  SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1
  Smart_Park
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}   ; Set and heat the final extruder temperature
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  ; Wait for extruder to reach near target temperature
  
  # Custom purge in slicer
  # LINE_PURGE                                                      ; KAMP Line Purge near print
  # G1 Z2.0 F3000                                                   ; Move Z Axis up 
  # M220 S100      

[gcode_macro PRINT_START]   
variable_small_print: False
gcode:
  {action_respond_info("Running PRINT START...")}

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set BED_HEAT_SOAK_MINUTES = params.BED_HEAT_SOAK_MINUTES|default(0)|float %}
  {% set BED_MESH = params.BED_MESH|default('adaptive')|string %} ; One of: adaptive (default), full, default (or any other value as the bed mesh profile name), none
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set PRINT_SIZE = params.PRINT_SIZE|default("0_0_0_0")|string %}

  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=False
  HEATERBED_SELECT SIZE={PRINT_SIZE}                                                                                     # Determine which heater beds are needed
  BED_MESH_CLEAR

  SET_BED_TEMPERATURE TARGET={BED_TEMP}                           ; Heat Bed to target temp
  BED_TEMPERATURE_WAIT MINIMUM={BED_TEMP-2} MAXIMUM={BED_TEMP+4}  ; Waits until the bed reaches close to target
  RESPOND TYPE=command MSG='Bed Temp Reached, Beginning Scan'

  CG28
  M109 S{EXTRUDER_TEMP}       ; Heat nozzle to clean
  EXTRUDE A=15
  WAIT S=10
  CLEAN_NOZZLE                ; Clean nozzle

  CG28                           
  {% if not printer.z_tilt.applied %}
    Z_TILT_ADJUST_ORIGINAL                  # Z Tilt if not already done
  {% endif %}

  {% if BED_MESH == 'full' %}
    BED_MESH_CALIBRATE
  {% elif BED_MESH == 'adaptive' %}
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% elif BED_MESH != 'none' %}
    BED_MESH_PROFILE LOAD={BED_MESH}
  {% endif %}
  CARTOGRAPHER_TOUCH
  SKEW_PROFILE LOAD=CaliFlower
  G92 E0                                                          ; Reset Extruder
  Smart_Park
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}   ; Set and heat the final extruder temperature
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  ; Wait for extruder to reach near target temperature
       
[gcode_macro PRINT_END]
gcode:
  M400                    ; wait for buffer to clear
  SET_SKEW CLEAR=1
  TURN_OFF_HEATERS
  G92 E0                  ; zero the extruder
  G91                     ; Relative positioning
  G1 E-2 F2700            ; Retract a bit
  G1 X5 Y5 F3000          ; Wipe out
  G1 E-2 Z0.2 F1600       ; Retract and raise Z
  G1 Z15 F3000             ; Raise Z more
  G90                     ; Absolute positioning
  G1 X25 Y220              ; Present print
  M107                    ; turn off fan
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  M104 S0                 ;Turn-off hotend
  M140 S0 
  M117
  CLEAR_ACTIVE_SPOOL

#############################################################################
#   Pause, Resume & Cancel
#############################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # PAUSE_TUNE
  {% set z = params.Z|default(30)|int %}                                                   ; z hop amount 30mm
  {% if printer['pause_resume'].is_paused|int == 0 %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
      SAVE_GCODE_STATE NAME=PAUSE                                                          ; save the current print position for resume, before z-hop
      BASE_PAUSE                                                                           ; pause print
      G91                                                                           
      {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
          G1 E-2 F2700                                                                     ; Retract 2mm
          G1 X25 Y3 F3000                                                                   ; Wipe out 
          G1 E-2 Z{z} F1600                                                                ; Retract 2mm more & raise z by z hop amount 
          SAVE_GCODE_STATE NAME=ZLIFT                                                      ; save the current print position for resume, after z-hop
      {% else %}
          { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
          G1 E-2 F2700                                                                     ; Retract 2mm
          G1 X25 Y3 F3000                                                                   ; Wipe out 
          G1 E-2 F1600                                                                     ; Retract 2mm more
          SAVE_GCODE_STATE NAME=ZLIFT
      {% endif %}
      G90
      G1 X{printer.toolhead.axis_minimum.x+5} Y{printer.toolhead.axis_maximum.y} F6000     ; park toolhead at the rear left of the bed
      SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save the parked position
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160                                    ; cool down hotend to no-drip temp
      SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set idle timeout to 12 hours (in seconds)
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  {% if printer['pause_resume'].is_paused|int == 1 %}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                           ; enable filament sensor
      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}   ; set timeout back to configured value
      {% if etemp > 0 %}
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int - 4} MAXIMUM={etemp|int + 10}  ; wait for hotend to heat back up to print temp
      {% endif %}
      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                      ; go back to park position in case toolhead was moved during pause                                                                        ; enable extruder stepper motor
      G91                                                                           ; relative positioning
      M83                                                                           ; set extruder to relative mode
      G1 E55  F200                                                                  ; extrude 55mm of filament to prime the nozzle
      G4 P2000                                                                      ; wait for 2 seconds to stabilise pressure
      G1 X20 F15000                                                                 ; wiggle movement to ensure free movement of purge
      G1 X-20
      G1 X20
      G1 X-20
      G1 X20
      G1 X-20
      RESTORE_GCODE_STATE NAME=ZLIFT MOVE=1 MOVE_SPEED=60                           ; restore to the zlift position above the print
      G1 X-3 Y-3 F3000                                                              ; Undo the pause Wipe out 
      G1 Z{zhop * -1} F900  
      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                           ; restore to the paused position (lowers to final print location)
      M400                                                                          ; wait for all moves to complete
      BASE_RESUME                                                                   ; resume print
  {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

#############################################################################
#   Change filament
#############################################################################

[gcode_macro M600]
description: Pause for colour change
gcode:
  PAUSE
  UNLOAD_FILAMENT

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  25
variable_purge_distance:  30
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={200-4} MAXIMUM={200+40}
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{max_velocity}          ; fast-load
  G1 E{purge_distance} F{speed}                ; purge
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  55
variable_purge_distance:  15
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={200-4} MAXIMUM={200+40}
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  G92 E0
  G1 E{purge_distance} F{speed}                ; purge
  G1 E-{unload_distance} F{max_velocity}       ; fast-unload
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro DRY_FILAMENT]
variable_dry_time: 28800
variable_dry_temp: 65
gcode:
gcode:
  SET_BED_TEMPERATURE TARGET={dry_temp}                           ; Heat Bed to target temp
  BED_TEMPERATURE_WAIT MINIMUM={dry_temp-2} MAXIMUM={dry_temp+4}
  SET_IDLE_TIMEOUT TIMEOUT={dry_time}

#############################################################################
#   Fan Control
#############################################################################

[gcode_macro M106]
rename_existing: M106.1
gcode:
  {% set fan = 'fan' + (params.P|int if params.P is defined else 0)| string %}
  {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
  {% if fan == "fan3" %}
    SET_FAN_SPEED FAN="Bentobox" SPEED={speed}
    RESPOND PREFIX=fan MSG="Setting {fan} to: {speed}"
  {% else %}
    M106.1 {rawparams}
  {% endif %}

#############################################################################
#   Beeeper
#############################################################################

[gcode_macro M300]
gcode:
  {% set S = params.S|default(2000)|int %}        ; Set frequency (S), default to 2 kHz if omitted or invalid
  {% set P = params.P|default(100)|int %}         ; Set duration (P), default to 100ms if omitted or invalid
  SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/S if S > 0 else 1 }       ; Activate the beeper at a 80% duty cycle
  G4 P{P}                                         ; Hold the beep for the specified duration
  SET_PIN PIN=beeper VALUE=0                      ; Turn off the beeper

[gcode_macro PAUSE_TUNE]
gcode:
  M300 S784 P300
  M300 S587 P600
    
[gcode_macro END_TUNE]
gcode:
  M300 S392 P250 
  M300 S494 P250 
  M300 S587 P250 
  M300 S523 P300

#############################################################################
#   Home and Leveling
#############################################################################

[gcode_macro Bed_Level_Screws_Tune]
gcode:
  # SET_BED_TEMPERATURE TARGET=60
  # BED_TEMPERATURE_WAIT MINIMUM=58 MAXIMUM=65
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0
  CG28
  # ATTACH_PROBE
  SCREWS_TILT_CALCULATE
  # DETACH_PROBE
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1

[gcode_macro Calibrate_Probe_Z_Offset]
gcode:
  CG28
  PROBE_CALIBRATE
  # RESPOND TYPE=command MSG='Invalid Command with Cartographer'
      
[gcode_macro Auto_Full_Bed_Level]
gcode:
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0
  BED_MESH_CLEAR
  SET_BED_TEMPERATURE TARGET=60
  BED_TEMPERATURE_WAIT MINIMUM=58 MAXIMUM=65
  CG28
  # ATTACH_PROBE
  BED_MESH_CALIBRATE
  # DETACH_PROBE
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1

[gcode_macro Axis_Twist_Comp_Tune]
gcode:    
  CG28
  AXIS_TWIST_COMPENSATION_CALIBRATE

# Macro to perform a modified z_tilt  by wrapping it between M401/M402 macros
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_ORIGINAL
gcode:
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0
  CG28
  # ATTACH_PROBE
  Z_TILT_ADJUST_ORIGINAL         ; check bed level
  # DETACH_PROBE
  # SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1

#############################################################################
#   PID Tuning Macros
#############################################################################

[gcode_macro PID_Tune_EXTRUDER]
gcode:
  {% set temperature = params.TEMPERATURE|default(210) %}
  CG28
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET={temperature}
  SAVE_CONFIG

[gcode_macro PID_Tune_BED]
gcode:
  {% set temperature = params.TEMPERATURE|default(60) %}
  CG28
  M106 S255 ;Sets Print Fans to 100%
  PID_CALIBRATE HEATER=heater_bed TARGET={temperature}
  SAVE_CONFIG
  
[gcode_macro PID_Tune_Outer_BED]
gcode:
  {% set temperature = params.TEMPERATURE|default(60) %}
  CG28
  M106 S255 ;Sets Print Fans to 100%
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={temperature} 	;Heats Inner Zone at the same time for better tuning 
  PID_CALIBRATE HEATER=heater_bed_outer TARGET={temperature}
  SAVE_CONFIG

#############################################################################
#   Custom marco
#############################################################################
[gcode_macro CLEAN_NOZZLE]
variable_start_x: -5   ; Set this X distance so that it's at the right edge of the scrubber.
variable_start_y: 225  ; Set this Y distance so that the nozzle is above the rear row of bristles.
variable_start_z: 0   ; Set this Z distance so that the nozzle tip is buried in the scrubber.
variable_wipe_dist: -35
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 10

gcode:
  EXTRUDE A=15
  RETRACT L=5 F2400
  WAIT S=10
  CG28
  G90                                            ; absolute positioning
  ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500

  ## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x} Y{start_y + wipe_dist} F{wipe_spd * 60}
    G1 X{start_x} Y{start_y} F{wipe_spd * 60}
    G1 X{start_x + 3} Y{start_y  + wipe_dist} F{wipe_spd * 60}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 60}
  {% endfor %}

  ## Raise nozzle
  G1 X{start_x + 3} Z{raise_distance}
  {% if printer['extruder'].temperature >= 150 %} # Nozzle is too hot for carto touch, use fans at 100% for faster cooldown
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    M106 S255
  {% endif %}

[gcode_macro EXTRUDE]
description: Extrude a specific amount. PERAMS: A
gcode:
    {% set amount = params.A|default(0)|float %}

    SAVE_GCODE_STATE NAME=EXTRUDE
    {% if amount < 0 %}
        {action_respond_info("Extrusion is less than 0! Not extruding!") }
    {% else %}
        {action_respond_info("Extruding %.2fmm..." % (amount)) }
        G92 E0
        G1 E-3 F2100
        G1 E{amount} F600
        G92 E0
    {% endif %}
    RESTORE_GCODE_STATE NAME=EXTRUDE

[gcode_macro RETRACT]
description: Retract filament after extrusion. PARAMS: L=độ dài (mm), F=tốc độ (mm/phút)
gcode:
    {% set length = params.L|default(3)|float %}
    {% set speed  = params.F|default(1800)|float %}
    {action_respond_info("Retracting %.2fmm at %.0f mm/min" % (length, speed))}
    G91                         ; relative mode
    G1 E-{length} F{speed}
    G90                         ; absolute mode

[gcode_macro WAIT]
description: Wait a specified number of seconds | Params: S
gcode:
    # Params
    {% set seconds = params.S|default(0)|int %}
    
    {% if seconds == 0 %}
        {action_respond_info("No amount of time was specifed! Not Waiting!") }
    {% else %}
        {action_respond_info("Waiting %.0f seconds..." % (seconds)) }

        G4 P{seconds * 1000}                                                                                            # Wait for provided time
    {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dumps all Klipper parameters to the console. This helps to find Klipper system variables for use in macros | Params: None
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CLEAN_Z]
gcode:
    CG28
    G90
    G0 Z{printer.toolhead.axis_maximum.z - 25} F{100*60}
    G0 Z10
    M84

[gcode_macro GREASE_Z]
gcode:
    CG28
    G90
    {% for i in range(3) %}
        G0 Z{printer.toolhead.axis_maximum.z - 15} F{100*60}
        G0 Z10
    {% endfor %}
    M84

[gcode_macro TEST_SOUND_X]
gcode:
    CG28 
    G90
    G0 Z 50
    {% for p in range(1,11) %}
      {% for i in range(3) %}
        G0 X{printer.toolhead.axis_maximum.x/2-100} F{p*50*60}
        G0 X{printer.toolhead.axis_maximum.x/2+100} F{p*50*60}
      {% endfor %}
    {% endfor %}
    M84

[gcode_macro TEST_SOUND_Y]
gcode:
    CG28 
    G90
    G0 Z 50
    {% for p in range(1,11) %}
      {% for i in range(3) %}
        G0 Y{printer.toolhead.axis_maximum.x/2-100} F{p*50*60}
        G0 Y{printer.toolhead.axis_maximum.x/2+100} F{p*50*60}
      {% endfor %}
    {% endfor %}
    M84

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        CG28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                CG28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        CG28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        CG28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:

    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
    {% set z_height = kamp_settings.smart_park_height | float %}
    {% set purge_margin = kamp_settings.purge_margin | float %}
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    # Nếu có purge margin thì offset vị trí park ra ngoài object
    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
        {% set x_min = [ x_min - purge_margin , x_min ] | min %}
        {% set y_min = [ y_min - purge_margin , y_min ] | min %}
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

    # Giới hạn không park gần Klicky probe (x ~ -5)
    {% set x_safe_limit = 25.0 %}
    {% if x_min < x_safe_limit %}
        {% set x_min = x_safe_limit %}
    {% endif %}

    {% if verbose_enable == True %}
        { action_respond_info("Smart Park location: {},{}.".format(
            (x_min),
            (y_min),
        )) }
    {% endif %}
    
    SAVE_GCODE_STATE NAME=Presmartpark_State

    G90
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height}
    {% endif %}
    G0 X{x_min} Y{y_min} F{travel_speed}
    G0 Z{z_height}

    RESTORE_GCODE_STATE NAME=Presmartpark_State

#############################################################################
#   Spoolman
#############################################################################

[gcode_macro SET_ACTIVE_SPOOL]
variable_spool_id: 0
gcode:
    {% if params.ID %}
        {% set id = params.ID|int %}
    {% else %}
        {% set id = spool_id %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=SET_ACTIVE_SPOOL VARIABLE=spool_id VALUE={id}
    {action_call_remote_method(
        "spoolman_set_active_spool",
        spool_id=id
    )}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}