#############################################################################
#   NOZZLE CLEAN
#############################################################################
# Version: 0.9.6
[gcode_macro CLEAN_NOZZLE]
description: Nozzle cleaning using a brush
gcode:
  # ------------------------------------------------------------------------
  # CONFIGURATION - CHANGE VALUES!
  # ------------------------------------------------------------------------
  {% set cleaningHeight = 0 %}                                # Set nozzle height for cleaning at the brush  
  {% set wipingAxis = "Y" %}                                  # Specifies the axis that will move during wiping (X/Y)
  {% set printerBedYMax = 229 %}                              # Set maximum Y value of the bed plate edge (not the nozzle maximum if it can go further). N4=229, N4Plus=330, N4Max=430
  {% set cleaningLoops = 1 %}                                 # Number of times the cleaning motions are executed before they are considered complete
  {% set purgeShake = 0 %}                                    # Disable (0) / Enable (1) PurgeShake movement before cleaning to remove filament strings
  {% set debug = 1 %}                                         # Disable (0) / Enable (1) verbose macro response messages - useful for debugging
  # ------------------------------------------------------------------------
  # DEFAULT VALUES FOR BAMBULAB A1 WIPER AND ELEGOO WIPER HOLDER (https://www.printables.com/model/1196153-neptune-4-corner-alignment-guides) - CHANGE CAREFULLY
  # ------------------------------------------------------------------------
  {% set wiperWidth = 8 %}                                    # Set wiper width
  {% set wiperLength = 37 %}                                  # Set wiper length
  {% set wiperWalloffset = 0 %}                               # Thickness of the wiper holder wall (distance of the silicone part from the bed)
  {% set bedCornerToWiperOffset = 40.5 %}                     # Bed corner to wiper offset (distance from X=0 to the silicone part for N4+ / N4M)
  {% set waves = 2 %}                                         # Increasing the number of waves results in a higher sinusoidal frequency
  {% set travelSpeed = 350 %}                                 # Speed (in mm/s) used for travel moves
  {% set slowSpeed, fastSpeed = (250, 500) %}                 # Speed (in mm/s) used for slow and fast cleaning moves
  {% set cleaningTemperatures = {                             
    "PLA": 140,
    "PETG": 200,
    "TPU": 190,
    "ABS": 190,
    "ASA": 190 } %}                                           # Filament cleaning temperatures
  # ------------------------------------------------------------------------
  # !!! DO NOT EDIT BELOW !!! - Changes below are unsupported
  # ------------------------------------------------------------------------
  # INITIALIZE AND CHECK VARIABLES
  {% set filamentType = params.FILAMENT_TYPE|default("PLA")|string|upper %} # Set filamentType to the provided variable (fallback to PLA)
  {% set error = 0 %} # Initialize error variable
  
  {% if wipingAxis not in ["x", "X", "y", "Y"] %} # Check for a valid wipingAxis
    RESPOND MSG="ERROR: Wiping axis configuration error. Please check your wipingAxis setting!"
    {% set error = 1 %}
  {% endif %}

  {% if wipingAxis in ["x", "X"] %} # Check clearances for cleaning with bed movements
    {% if ((printer.toolhead.axis_maximum.y - printerBedYMax) < 3.2) %}
      RESPOND MSG="ERROR: Insufficient vertical clearance between printerBedYMax ({printerBedYMax}) and nozzle max Y ({printer.toolhead.axis_maximum.y}). Minimum required: 3.2mm."
      {% set error = 1 %}
    {% endif %}
    {% if ((printerBedYMax < 1) or ((printerBedYMax > 1000))) %}
      RESPOND MSG="ERROR: Printer bed Y-axis size ({printerBedYMax}) out of expected range. Please verify configuration."
      {% set error = 1 %}
    {% endif %}
  {% elif ((printer.configfile.config.stepper_x.position_endstop|float + 3.2) > 0) %} # Check clearances for cleaning with head movements
      RESPOND MSG="ERROR: X homing sensor position ({printer.configfile.config.stepper_x.position_endstop}) is too close to the bed. Required: â‰¤ -3.2mm."
      {% set error = 1 %}
  {% endif %}

  {% if cleaningLoops < 1 %} # Check if cleaningLoops is set to a minimum of 1 loop
    RESPOND MSG="WARNING: cleaningLoops set to false value:{cleaningLoops} - changed to default 1 "
    {% set cleaningLoops = 1 %}
  {% endif %}

  {% if wipingAxis in ["y", "Y"] %} # Cleaning using bed movement
    {% set wiperYmax = printerBedYMax %}
    {% if wiperWidth + wiperWalloffset + printer.configfile.config.stepper_x.position_endstop|float > 0 %}
      {% set wiperXmin = printer.configfile.config.stepper_x.position_endstop|float %}
      {% set wiperWidth = 0 - wiperWalloffset - printer.configfile.config.stepper_x.position_endstop|float %}
    {% else %}
      {% set wiperXmin = 0 - wiperWalloffset - wiperWidth %}
    {% endif %}
  {% else %} # Cleaning using head movement
    {% set wiperXmin = bedCornerToWiperOffset %}
    {% if printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset - wiperWidth < 0 %}
      {% set wiperYmax = printer.toolhead.axis_maximum.y %}
      {% set wiperWidth = printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset %}
    {% else %}
      {% set wiperYmax = printerBedYMax + wiperWalloffset + wiperWidth %}
    {% endif %}
  {% endif %}

  {% set travelFeedrate = travelSpeed * 60 %} # Convert travelSpeed to travelFeedrate
  {% set slowFeedrate = slowSpeed * 60 %} # Convert slowSpeed to slowFeedrate
  {% set fastFeedrate = fastSpeed * 60 %} # Convert fastSpeed to fastFeedrate

  {% if error == 0 %} # Continue only if error is zero
    # HOMING PROCESS
    {% if "x" not in printer.toolhead.homed_axes and "y" not in printer.toolhead.homed_axes and "z" not in printer.toolhead.homed_axes %}
      G28
    {% elif "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% elif "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% elif "z" not in printer.toolhead.homed_axes %}
      G28 Z
    {% endif %}

    # SAVE Z AXIS POSITION
    {% set zHeight = printer.toolhead.position.z %}
    {% if zHeight == 0 %}
      {% set zHeight = 10 %}
      {% set travelHeight = zHeight %}
    {% else %}
      {% set travelHeight = zHeight + 10 %}
    {% endif %}
  
    # CHECK FOR BLENDED FILAMENTS
    {% if "-" in filamentType %}
      {% set baseFilament = filamentType.split("-")[0] %}
      {% set stringSplitted = 1 %}
    {% else %}
      {% set baseFilament = filamentType %}
      {% set stringSplitted = 0 %}
    {% endif %}
    
    # EVALUATE CLEANING TEMPERATURE
    {% if baseFilament in cleaningTemperatures %}
      {% set cleaningTemperature = cleaningTemperatures[baseFilament] %}
      {% if debug == 1 %}
        {% if stringSplitted == 0 %}
          RESPOND MSG="INFO: Detected filament type {filamentType}. Cleaning temperature set to {cleaningTemperature}c."
        {% else %}
          RESPOND MSG="INFO: Detected filament type {filamentType} (base: {baseFilament}). Cleaning temperature set to {cleaningTemperature}c."
        {% endif %}
      {% endif %}
    {% else %}
      {% set cleaningTemperature = 140 %}
      RESPOND MSG="WARNING: Unknown filament type {filamentType}. Default cleaning temperature of {cleaningTemperature}c will be used."
    {% endif %}

    # # SAVE NOZZLE TARGET TEMPERATURE
    # {% set cleaningTemperature = printer['extruder'].temperature %}

    # HEAT EXTRUDER
    {% if cleaningTemperature != printer['extruder'].temperature %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cleaningTemperature}
      {% if debug == 1 %}
        RESPOND MSG="INFO: Heating extruder to {cleaningTemperature}c for cleaning..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cleaningTemperature-4} MAXIMUM={cleaningTemperature+10}
    {% endif %}

    # CLEANING SEQUENCE
    {% if debug == 1 %}
      RESPOND MSG="INFO: Initiating nozzle cleaning sequence..."
    {% endif %}    

    # PURGE SHAKE
    {% if purgeShake == 1 %}
      # Travel to PurgeShake position
      G90
      G1 Z{travelHeight} F3000                                      
      {% if wipingAxis in ["y", "Y"] %}
        {% if debug == 1 %}
          RESPOND MSG="INFO: Shaking movement starting at X=0, Y={printerBedYMax-1} (1mm safety margin)."
        {% endif %}
        G1 X0 Y{printerBedYMax-1} F{travelFeedrate}
      {% else %}
        {% if debug == 1 %}
          RESPOND MSG="INFO: Shaking movement starting at X={bedCornerToWiperOffset+wiperLength+1}, Y={printerBedYMax-1} (1mm safety margin)."
        {% endif %}
        G1 X{bedCornerToWiperOffset+wiperLength+1} Y{printerBedYMax-1} F{travelFeedrate}
      {% endif %}
      
      # Quick left/right movements to clear filament strings
      G91
      G1 X20 F{fastFeedrate}
      G1 X-20
      G1 X20
      G1 X-20
      G1 X20
      G1 X-20   
    {% endif %}      

    # Nozzle cleaning
    {% if wipingAxis in ["y", "Y"] %}
      # --- BED MOVEMENT CLEANING SEQUENCE ---
      {% if debug == 1 %}
        RESPOND MSG="INFO: Repeating cleaning motions for {cleaningLoops} times"
        {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
            RESPOND MSG="INFO: Starting first cleaning passes near X endstop at X={wiperXmin+0.2}, Y={wiperYmax} (limited X clearance)."
          {% else %}
            RESPOND MSG="INFO: Starting first cleaning passes at X={wiperXmin+(wiperWidth/4)}, Y={wiperYmax}."
          {% endif %}
      {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
          G1 X{wiperXmin+0.2} Y{wiperYmax} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+(wiperWidth/4)} Y{wiperYmax} F{travelFeedrate}
        {% endif %}

        # Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200
        
        # Perform pseudosinusoidal cleaning motion
        G91
        {%set ymov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
          G1 X-{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{ymov}
          G1 Y{ymov}
          G1 X{wiperWidth} Y{ymov}
          G1 Y{ymov}
        {% endfor %}

        G1 F{fastFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y-{ymov}
          G1 X{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
          G1 X-{wiperWidth} Y-{ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y{ymov}
          G1 X-{wiperWidth} Y{ymov}
          G1 Y{ymov}
          G1 X{wiperWidth} Y{ymov}
        {% endfor %}

        G1 F{slowFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{2*ymov}
          G1 X-{wiperWidth} Y-{2*ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{2*ymov}
          G1 X{wiperWidth} Y{2*ymov}
        {% endfor %}
      {% endfor %}

    {% else %}
      # --- HEAD MOVEMENT CLEANING SEQUENCE ---
      {% if debug == 1 %}
        RESPOND MSG="INFO: Repeating cleaning motions for {cleaningLoops} times"
        {% if wiperYmax == printer.toolhead.axis_maximum.y %}
            RESPOND MSG="INFO: Starting first cleaning passes near bed edge at X={wiperXmin+wiperLength}, Y={wiperYmax-0.1} (limited Y clearance)."
          {% else %}
            RESPOND MSG="INFO: Starting first cleaning passes at X={wiperXmin+wiperLength}, Y={wiperYmax-(wiperWidth/4)}."
          {% endif %}
      {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperYmax == printer.toolhead.axis_maximum.y %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-0.1} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-(wiperWidth/4)} F{travelFeedrate}
        {% endif %}
        
        # Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200 
        
        # Perform pseudosinusoidal cleaning motion
        G91
        {%set xmov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X-{xmov} Y-{wiperWidth}
          G1 X-{xmov}
          G1 X-{xmov} Y+{wiperWidth}
          G1 X-{xmov}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov} Y+{wiperWidth}
          G1 X{xmov}
          G1 X{xmov} Y-{wiperWidth}
          G1 X{xmov}
        {% endfor %}

        G1 F{fastFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov}
          G1 X-{xmov} Y-{wiperWidth}
          G1 X-{xmov}
          G1 X-{xmov} Y+{wiperWidth}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov}
          G1 X{xmov} Y+{wiperWidth}
          G1 X{xmov}
          G1 X{xmov} Y-{wiperWidth}
        {% endfor %}

        G1 F{slowFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov*2} Y-{wiperWidth}
          G1 X-{xmov*2} Y+{wiperWidth}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov*2} Y+{wiperWidth}
          G1 X{xmov*2} Y-{wiperWidth}
        {% endfor %}
      {% endfor %}
    {% endif %}

    # Restore saved nozze target temperature
    G1 Z{travelHeight} F3000
    {% if cleaningTemperature >= 150 %} # Nozzle is too hot for carto touch, use fans at 100% for faster cooldown
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
      M106 S255
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle was hot. Waiting for temperature to rise into 140-150c range..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={140} MAXIMUM={150}
      M106 S0
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle temperature reached target range (140-150c)."
      {% endif %}
    # {% elif cleaningTemperature > 60 and cleaningTemperature < cleaningTemperature %} # Nozzle is preheated, use fans at 50% for faster cooldown
    #   SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cleaningTemperature}
    #   M106 S128
    #   {% if debug == 1 %}
    #     RESPOND MSG="INFO: Restoring nozzle temperature to {cleaningTemperature}c. Please wait for stabilization..."
    #   {% endif %}
    #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cleaningTemperature} MAXIMUM={cleaningTemperature+10}
    #   M106 S0
    #   {% if debug == 1 %}
    #     RESPOND MSG="INFO: Nozzle temperature stabilized at ~{cleaningTemperature}c."
    #   {% endif %}
    # {% elif cleaningTemperature >= cleaningTemperature %} # Nozzle is hot, use no fans for faster heating
    #   SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cleaningTemperature}
    #   {% if debug == 1 %}
    #     RESPOND MSG="INFO: Restoring nozzle temperature to {cleaningTemperature}c. Please wait for stabilization..."
    #   {% endif %}
    #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cleaningTemperature} MAXIMUM={cleaningTemperature+10}
    #   {% if debug == 1 %}
    #     RESPOND MSG="INFO: Nozzle temperature stabilized at ~{cleaningTemperature}c."
    #   {% endif %}
    {% endif %}

    # Return to center of the bed
    {% if debug == 1 %}
      RESPOND MSG="INFO: Nozzle cleaning sequence complete. Returning nozzle to bed center."
    {% endif %}
    G90
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F{travelFeedrate}
  {% endif %}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro CG28]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=heatbreak+mainboard_fan TARGET=1
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CLEAN_Z]
gcode:
    CG28
    G90
    G0 Z{printer.toolhead.axis_maximum.z - 25} F{100*60}
    G0 Z10
    M84

[gcode_macro GREASE_Z]
gcode:
    G28
    G90
    {% for i in range(3) %}
        G0 Z{printer.toolhead.axis_maximum.z - 15} F{100*60}
        G0 Z10
    {% endfor %}
    M84

[gcode_macro TEST_SOUND_X]
gcode:
    G28 
    G90
    G0 Z 50
    {% for p in range(1,11) %}
      {% for i in range(3) %}
        G0 X{printer.toolhead.axis_maximum.x/2-100} F{p*50*60}
        G0 X{printer.toolhead.axis_maximum.x/2+100} F{p*50*60}
      {% endfor %}
    {% endfor %}
    M84

[gcode_macro TEST_SOUND_Y]
gcode:
    G28 
    G90
    G0 Z 50
    {% for p in range(1,11) %}
      {% for i in range(3) %}
        G0 Y{printer.toolhead.axis_maximum.x/2-100} F{p*50*60}
        G0 Y{printer.toolhead.axis_maximum.x/2+100} F{p*50*60}
      {% endfor %}
    {% endfor %}
    M84

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:

    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
    {% set z_height = kamp_settings.smart_park_height | float %}
    {% set purge_margin = kamp_settings.purge_margin | float %}
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    # Náº¿u cÃ³ purge margin thÃ¬ offset vá»‹ trÃ­ park ra ngoÃ i object
    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
        {% set x_min = [ x_min - purge_margin , x_min ] | min %}
        {% set y_min = [ y_min - purge_margin , y_min ] | min %}
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

    # Giá»›i háº¡n khÃ´ng park gáº§n Klicky probe (x ~ -5)
    {% set x_safe_limit = 25.0 %}
    {% if x_min < x_safe_limit %}
        {% set x_min = x_safe_limit %}
    {% endif %}

    {% if verbose_enable == True %}
        { action_respond_info("Smart Park location: {},{}.".format(
            (x_min),
            (y_min),
        )) }
    {% endif %}
    
    SAVE_GCODE_STATE NAME=Presmartpark_State

    G90
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height}
    {% endif %}
    G0 X{x_min} Y{y_min} F{travel_speed}
    G0 Z{z_height}

    RESTORE_GCODE_STATE NAME=Presmartpark_State

[gcode_macro SET_ACTIVE_SPOOL]
variable_spool_id: 0
gcode:
    {% if params.ID %}
        {% set id = params.ID|int %}
    {% else %}
        {% set id = spool_id %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=SET_ACTIVE_SPOOL VARIABLE=spool_id VALUE={id}
    {action_call_remote_method(
        "spoolman_set_active_spool",
        spool_id=id
    )}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}