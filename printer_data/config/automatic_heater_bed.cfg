[gcode_macro HEATERBED_SELECT]
description: Automatically select which bed heater to use on the Elegoo Neptune 4 Pro | Params: SIZE, TEMP, SOAK(0)
gcode:
  # Params
  {% set fl_size = params.SIZE|string %}

  {% set center_x_min = ((230 / 2) - (120 / 2)) %}
  {% set center_y_min = ((230 / 2) - (120 / 2)) %}
  {% set center_x_max = ((230 / 2) + (120 / 2)) %}
  {% set center_y_max = ((230 / 2) + (120 / 2)) %}

  {% if fl_size is defined and fl_size != "0_0_0_0" %}
        {action_respond_info("Got a SIZE parameter for the object being printed")}

        {% set print_x_min, print_y_min, print_x_max, print_y_max = fl_size.split('_')|map('trim')|map('float') %}

        {% set x_print_size = (print_x_max - print_x_min) %}
        {% set y_print_size = (print_y_max - print_y_min) %}

        # Figure out if the print resides outside of the inner bed
        {% if print_x_min < center_x_min or print_y_min < center_y_min or print_x_max > center_x_max or print_y_max > center_y_max %}
            {action_respond_info("Large print detected as it resides outside 120x120 (%sx%s)" % (x_print_size|int, y_print_size|int)) }

            SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=False
        {% else %}
            # Only heat inner bed
            {action_respond_info("Small print detected as it resides inside 120x120(%sx%s)" % (x_print_size|int, y_print_size|int)) }

            SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=True

        {% endif %}
    {% else %}
        # If all else fails lets treat as a large print by default
        {action_respond_info("Print size was not passed! Treating as large print.") }

        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=False
    {% endif %}

[gcode_macro SET_BED_TEMPERATURE]
gcode:
  # SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.TARGET}
  # {% if not printer["gcode_macro PRINT_START"].small_print %}
  #   SET_HEATER_TEMPERATURE HEATER=heater_bed_outer TARGET={params.TARGET}
  # {% endif %}

  # Params
  {% set TARGET = params.TARGET|default(60)|float %}

  {% set small_print = printer["gcode_macro PRINT_START"].small_print %}
  {% set heater_bed = printer["heater_bed"] %}
  {% set heater_bed_outer = printer["heater_generic heater_bed_outer"] %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={TARGET}
  {% if not small_print %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed_outer TARGET={TARGET}
  {% endif %}

  {action_respond_info("Set bed temp to %s C." % (TARGET)) }

[gcode_macro BED_TEMPERATURE_WAIT]
gcode:
  # {% if params.MINIMUM is defined and params.MAXIMUM is defined and params.SOAK is defined %}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.MINIMUM} MAXIMUM={params.MAXIMUM}
  #   WAIT S={params.SOAK * 60}
  #   {% if not printer["gcode_macro PRINT_START"].small_print %}
  #     TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer" MINIMUM={params.MINIMUM} MAXIMUM={params.MAXIMUM}
  #     WAIT S={params.SOAK * 60}
  #   {% endif %}
  # {% elif params.MINIMUM is defined and params.MAXIMUM is defined %}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.MINIMUM} MAXIMUM={params.MAXIMUM}
  #   {% if not printer["gcode_macro PRINT_START"].small_print %}
  #     TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer" MINIMUM={params.MINIMUM} MAXIMUM={params.MAXIMUM}
  #   {% endif %}
  # {% elif params.MINIMUM is defined %}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.MINIMUM}
  #   {% if not printer["gcode_macro PRINT_START"].small_print %}
  #     TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer" MINIMUM={params.MINIMUM}
  #   {% endif %}
  # {% elif params.MAXIMUM is defined %}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={params.MAXIMUM}
  #   {% if not printer["gcode_macro PRINT_START"].small_print %}
  #     TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer" MAXIMUM={params.MAXIMUM}
  #   {% endif %}
  # {% else %}
  #   RESPOND TYPE=error MSG="Error on 'BED_TEMPERATURE_WAIT': missing MINIMUM or MAXIMUM."
  # {% endif %}

  {% set min = params.MINIMUM is defined %}
  {% set max = params.MAXIMUM is defined %}
  {% set soak = params.SOAK is defined %}

  {% if min or max %}
    TEMPERATURE_WAIT SENSOR=heater_bed{% if min %} MINIMUM={params.MINIMUM}{% endif %}{% if max %} MAXIMUM={params.MAXIMUM}{% endif %}
    {% if not printer["gcode_macro PRINT_START"].small_print %}
      TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer"{% if min %} MINIMUM={params.MINIMUM}{% endif %}{% if max %} MAXIMUM={params.MAXIMUM}{% endif %}
    {% endif %}
    {% if soak %}
      WAIT S={ params.SOAK * 60 }
      {% if not printer["gcode_macro PRINT_START"].small_print %}
        WAIT S={ params.SOAK * 60 }
      {% endif %}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Error on 'BED_TEMPERATURE_WAIT': missing MINIMUM or MAXIMUM."
  {% endif %}

[gcode_macro M140]               ; redefine the existing M140
rename_existing: M99140
gcode:
  {% if params.S is defined %}
    SET_BED_TEMPERATURE TARGET={params.S|int}
  {% endif %}

[gcode_macro M141]
gcode:
  {% if params.S is defined %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed_outer TARGET={params.S|int}
  {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:    
  {% if params.S is defined %}
    SET_BED_TEMPERATURE TARGET={params.S|int}
    BED_TEMPERATURE_WAIT MINIMUM={(params.S|int)-2} MAXIMUM={(params.S|int)+4}
  {% endif %}

[gcode_macro M191]
gcode:
  {% if params.S is defined %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed_outer TARGET={params.S|int}
    TEMPERATURE_WAIT SENSOR="heater_generic heater_bed_outer" MINIMUM={(params.S|int)-2} MAXIMUM={(params.S|int)+4}
  {% endif %}